p %>% layout(title = "2015-2014 GDP difference of countries highlighted by 2015 gdp ranking",
xaxis = list(title = ''),
yaxis = list(title = 'Difference in billion $')
)
```
?plot_ly
shiny::runApp('Desktop/Data/coursera/Coursera-Developing Data Products/FirstShinyApp')
runApp('Desktop/Data/coursera/Coursera-Developing Data Products/FirstShinyApp')
install.packages("UsingR")
runApp('Desktop/Data/coursera/Coursera-Developing Data Products/FirstShinyApp')
library(Hmisc)
library(dplyr)
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "")
names(water_raw)[8:9] <- c("Dissolved_O2_mg.L", "Dissolved_O2_mg.L_Saturation")
describe_water <- describe(water_raw)
library(Hmisc)
library(dplyr)
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "")
names(water_raw)[8:9] <- c("Dissolved_O2_mg.L", "Dissolved_O2_mg.L_Saturation")
water_NA <-sapply(water_raw, function(y) sum(length(which(is.na(y)))))
water_NA
nrow(water_raw)
water_NA <-sapply(water_raw, function(y) sum(length(which(is.na(y))))) / nrow(water_raw)
water_NA
crime_data <-read_excel("/Users/Caner/Desktop/projects/open_data_dal/crime_b.xlsx")
library(readxl)
crime_data <-read_excel("/Users/Caner/Desktop/projects/open_data_dal/crime_b.xlsx")
crime_data
View(crime_data)
library(Hmisc)
crime_raw <-read_excel("/Users/Caner/Desktop/projects/open_data_dal/crime_b.xlsx")
crime_desc <- describe(crime_raw)
crime_NA <-sapply(crime_raw, function(y) sum(length(which(is.na(y))))) / nrow(water_raw)
crime_NA
ncol(crime_raw)
crime_df <- crime_raw[,1:9]
sapply(crime_df, function(y) sum(length(which(is.na(y))))) / nrow(water_raw)
crime_df <- crime_raw[,1:9]
?lm
crime_df <- crime_raw
crime_NA
crime_df <- crime_raw[nrow(crime_raw)-5:nrow(crime_raw),]
crime_NA <-sapply(crime_df, function(y) sum(length(which(is.na(y))))) / nrow(water_raw)
crime_NA
lm1 <- lm(Total violent Criminal Code violations ~ population + size  data = crime_df)
names(crime_df)
names(crime_df)[13] <- "total_crime"
lm1 <- lm(total_crime ~ population + size  data = crime_df)
lm1 <- lm(total_crime ~ population + size,  data = crime_df)
names(crime_df)
names(crime_df)[6] <- "population"
lm1 <- lm(total_crime ~ population,  data = crime_df)
lm1
names(crime_df)[13] <- "total_crime"
names(crime_df)[6] <- "population"
names(crime_df)[7] <- "avg_age"
names(crime_df)[8] <- "avg_householdsize"
names(crime_df)[9] <- "med_income_house"
lm1 <- lm(total_crime ~ population + avg_age + avg_householdsize + med_income_house,  data = crime_df)
lm1
sapply(crime_df,class)
crime_df$population <- as.numeric(crime_df$population)
lm1 <- lm(total_crime ~ population + avg_age + avg_householdsize + med_income_house,  data = crime_df)
lm1
crime_df$avg_householdsize <- as.numeric(crime_df$avg_householdsize)
lm1 <- lm(total_crime ~ population + avg_age + avg_householdsize + med_income_house,  data = crime_df)
lm1
crime_desc
crime_desc <- describe(crime_df)
crime_desc
sapply(crime_df,class)
crime_df$population
sort(crime_df$population)
lm1
sort(crime_df$avg_age)
sort(crime_df$avg_householdsize)
sort(crime_df$med_income_house)
max(crime_df$population)
which(crime_df$population ==  max(crime_df$population))
View(crime_df[-which(crime_df$population ==  max(crime_df$population)),])
crime_df_no_outlier <- crime_df[-which(crime_df$population ==  max(crime_df$population)),]
names(crime_df_no_outlier)
lm1
scale(crime_df_no_outlier[,c("population", "avg_age", "avg_householdsize", "med_income_house")])
crime_scaled <-  scale(crime_df_no_outlier[,c("population", "avg_age", "avg_householdsize", "med_income_house")])
crime_sclaed
crime_scaled
dim(crime_scaled)
class(crime_scaled)
as.data.frame(crime_scaled)
crime_scaled <- as.data.frame(crime_scaled) %>% cbind
library(dplyr)
crime_scaled2 <- as.data.frame(crime_scaled) %>% cbind(crime_df_no_outlier$total_crime)
crime_scaled2
names(crime_scaled2)[5] <- "total_crime"
crime_scaled2
lm1 <- lm(total_crime ~ . , data = crime_scaled2)
lm1
predict(lm1)
crime_scaled2$total_crime
plot(crime_scaled2, l = predict(lm1))
plot(crime_scaled2, l = predict(lm1))
plot(crime_scaled2)
plot(crime_scaled2$total_crime)
plot(crime_scaled2$total_crime, l = predict(lm1))
plot(crime_scaled2$total_crime, abline = predict(lm1))
?abline
lm1
summary(lm1)
crime_df
class(crime_df)
crime_df_no_outlier
as.data.frame(crime_df_no_outlier)
View(as.data.frame(crime_df_no_outlier))
crime_no_out_df <- as.data.frame(crime_df_no_outlier))
crime_no_out_df <- as.data.frame(crime_df_no_outlier)
lm2 <- lm(total_crime ~  population + avg_age + avg_householdsize + med_income_house , data = crime_no_out_df)
summary(lm2)
R.version
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc"))
install_github("plotly/dashR")
install_github("plotly/dash-html-components")
install_github("plotly/dash-core-components")
library(devtools)
install_github("plotly/dashR")
install_github("plotly/dash-html-components")
install_github("plotly/dash-core-components")
install_github('andreacirilloac/updateR')
library(updateR)
library(updateR)
?updateR()
library(admin_password = "adilcaner1ABD")
updateR(admin_password = "adilcaner1ABD")
install.packages(as.vector(needed_packages))
R.version
library(Hmisc)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install_github("plotly/dashR")
install_github("plotly/dash-html-components")
install_github("plotly/dash-core-components")
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("plotly/dashR")
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc"))
library(dplyr)
install.packages("dplyr")
library(shiny)
install.packages("shiny")
library(shiny)
runApp('Desktop/Data/coursera/Coursera-Developing Data Products/CountryGDP')
runApp('Desktop/projects/open_data_dal/FollowRivers')
library(dplyr)
library(shiny) ; library(dplyr) ; library(plotly)
install.packages("plotly")
library(plotly)
library(shiny) ; library(dplyr) ; library(plotly)
library(shiny) ; library(dplyr) ; library(plotly) ; library(shiny)
names(water_raw)
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "")
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "",
stringsAsFactors=FALSE, fileEncoding="latin1")
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "",
stringsAsFactors=FALSE)
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "",
fileEncoding="latin1")
names(water_raw)
water_df <- water_raw
names(water_df)[9:12] <- c("Parameter1","Parameter2","Parameter3","Parameter4")
caner <- 3
assign(caner) <- 5
assign(caner)
caner
?assign
c <- y ~ x
c
d
d <- y ~ x + b
class(c)
class(d)
names(water_df)
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
selectedparameterdata <- select(water_df, c(Sample_Date,parameter_selected))
water_df
names(water_df)
parameter_selected
parameter_selected = "Parameter1"
selectedparameterdata <- select(water_df, c(Sample_Date,parameter_selected))
Vie(selectedparameterdata)
Viev(selectedparameterdata)
View(selectedparameterdata)
plot_ly(data = selectedparameterdata, x = ~Sample_Date, y = ~parameter_selected , type = 'scatter')
runApp('Desktop/projects/open_data_dal/FollowRivers')
selectedparameterdata$Parameter1
unique(selectedparameterdata$Parameter1)
runApp('Desktop/projects/open_data_dal/FollowRivers')
class(selectedparameterdata$Parameter1)
selectedparameterdata
selectedparameterdata <- selectedparameterdata[complete.cases(selectedparameterdata), ]
runApp('Desktop/projects/open_data_dal/FollowRivers')
names(selectedparameterdata)
parameter_selected
plot_ly(data = selectedparameterdata, x = ~Sample_Date, y = ~parameter_selected , type = 'scatter')
plot_ly(data = selectedparameterdata, x = ~Sample_Date, y = ~Parameter1 , type = 'scatter')
assign(parameter_selected)
?plot_ly
?assign
paste(selectedparameterdata)
paste(parameter_selected)
runApp('Desktop/projects/open_data_dal/FollowRivers')
plot_ly(data = selectedparameterdata, x = ~Sample_Date, y = ~paste(parameter_selected) , type = 'scatter')
parameter_selected
paste(parameter_selected)
names(selectedparameterdata)
names(selectedparameterdata) == parameter_selected
names(selectedparameterdata)[names(selectedparameterdata) == parameter_selected]
plot_ly(data = selectedparameterdata, x = ~Sample_Date, y = ~names(selectedparameterdata)[names(selectedparameterdata) == parameter_selected] , type = 'scatter')
plot_ly(data = selectedparameterdata, x = ~Sample_Date, y = ~names(selectedparameterdata)[names(selectedparameterdata) == parameter_selected] , type = 'scatter')
assign(5, parameter_selected)
assign("test", parameter_selected)
test
names(selectedparameterdata)[names(selectedparameterdata) == parameter_selected]
plot_ly(data = selectedparameterdata, type = 'scatter')
plot_ly(data = selectedparameterdata, x= names(selectedparameterdata)[1],y= names(selectedparameterdata)[2], type = 'scatter')
names(selectedparameterdata)[1]
names(selectedparameterdata)[2]
plot_ly(data = selectedparameterdata, x= Sample_Date,y= Parameter1, type = 'scatter')
plot_ly(data = selectedparameterdata, x= Sample_Date, y= Parameter1, type = 'scatter')
names(selectedparameterdata)
plot_ly(data = selectedparameterdata, x= "Sample_Date", y= "Parameter1", type = 'scatter')
plot_ly(data = selectedparameterdata, x= ~Sample_Date, y= ~Parameter1, type = 'scatter')
?plot_ly
plot_ly(x = selectedparameterdata[,1], y =selectedparameterdata[,2])
plot_ly(x = selectedparameterdata[,1], y =selectedparameterdata[,2], type = 'scatter')
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
?plot_ly
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
names(selectedparameterdata)
names(water_df)
unique(water_df$Station_Name)
unique(water_df$Station_Name)[1]
as.character(unique(water_df$Station_Name)[1])
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
selectedparameterdata
sapply(selectedparameterdata,class)
water_df
water_df$Sample_Date
as.character(water_df$Sample_Date)
as.Date(as.character(water_df$Sample_Date))
sort(as.character(water_df$Sample_Date))
substr(a$data,1,nchar(a$data)-3)
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "",
stringsAsFactors = FALSE, fileEncoding="latin1")
# Reading Data
water_df <- water_raw
names(water_df)[9:12] <- c("Parameter1","Parameter2","Parameter3","Parameter4")
as.character(water_df$Sample_Date)
class(water_df$Sample_Date)
substr(a$data,1,nchar(a$data)-3)
?substr
substr(water_df$Sample_Date,1,10)
substr(water_df$Sample_Date,1,nchar(water_df$Sample_Date)-4)
substr(water_df$Sample_Date,1,nchar(water_df$Sample_Date)-5)
water_df$Sample_Date <-  substr(water_df$Sample_Date,1,nchar(water_df$Sample_Date)-5)
?as.Date
water_df$Sample_Date <-  as.Date(substr(water_df$Sample_Date,1,nchar(water_df$Sample_Date)-5), format = 'd/m/y')
water_df
class(water_df$Sample_Date)
runApp('Desktop/projects/open_data_dal/FollowRivers')
as.character(unique(water_df$Station_Name)[1]
)
water_df$Sample_Date
parameter_selected
selectedparameterdata <- select(water_df, c(Sample_Date,parameter_selected, Station_Name))
selectedparameterdata <- selectedparameterdata[complete.cases(selectedparameterdata), ] %>%
filter(Station_Name == as.character(unique(water_df$Station_Name)[1])) %>%
arrange(Sample_Date)
selectedparameterdata
select(water_df, c(Sample_Date,parameter_selected, Station_Name))
selectedparameterdata[complete.cases(selectedparameterdata), ]
selectedparameterdata <- selectedparameterdata[complete.cases(selectedparameterdata$Parameter1), ] %>%
filter(Station_Name == as.character(unique(water_df$Station_Name)[1])) %>%
arrange(Sample_Date)
selectedparameterdata
select(water_df, c(Sample_Date,parameter_selected, Station_Name))
selectedparameterdata[complete.cases(selectedparameterdata$Parameter1), ]
selectedparameterdata <- select(water_df, c(Sample_Date,parameter_selected, Station_Name))
selectedparameterdata <- selectedparameterdata[complete.cases(selectedparameterdata[,2]),] %>%
filter(Station_Name == as.character(unique(water_df$Station_Name)[1])) %>%
arrange(Sample_Date)
selectedparameterdata
runApp('Desktop/projects/open_data_dal/FollowRivers')
parameter_selected <- input$parameter
selectedparameterdata <- select(water_df, c(Sample_Date,parameter_selected, Station_Name))
selectedparameterdata <- selectedparameterdata[complete.cases(selectedparameterdata[,2]),] %>%
filter(Station_Name == as.character(unique(water_df$Station_Name)[1])) %>%
arrange(Sample_Date)
selectedparameterdata
is.na(water_df$Sample_Date)
water_df$Sample_Date
selectedparameterdata <- select(water_df, c(Sample_Date,parameter_selected, Station_Name))
selectedparameterdata
water_df$Sample_Date <-  as.Date(substr(water_df$Sample_Date,1,nchar(water_df$Sample_Date)-5), format = 'd/m/y')
water_df$Sample_Date
as.Date(substr(water_df$Sample_Date,1,nchar(water_df$Sample_Date)-5), format = 'd/m/y')
water_df$Sample_Date <-  as.Date(substr(water_raw$Sample_Date,1,nchar(water_df$Sample_Date)-5), format = 'd/m/y')
water_df$Sample_Date
substr(water_raw$Sample_Date,1,nchar(water_df$Sample_Date)-5)
water_raw <- read.csv("/Users/Caner/Desktop/projects/open_data_dal/waterdata.csv", na.strings = "",
stringsAsFactors = FALSE, fileEncoding="latin1")
# Reading Data
water_df <- water_raw
names(water_df)[9:12] <- c("Parameter1","Parameter2","Parameter3","Parameter4")
water_df$Sample_Date <-  as.Date(substr(water_raw$Sample_Date,1,nchar(water_raw$Sample_Date)-5), format = 'd/m/y')
water_df$Sample_Date
substr(water_raw$Sample_Date,1,nchar(water_raw$Sample_Date)-5)
as.Date(substr(water_raw$Sample_Date,1,nchar(water_raw$Sample_Date)-5), format = 'm/d/y')
substr(water_raw$Sample_Date,1,nchar(water_raw$Sample_Date)-5)
as.Date(substr(water_raw$Sample_Date,1,nchar(water_raw$Sample_Date)-5), format = 'm/d/y')
?as.Date
as.Date(substr(water_raw$Sample_Date,1,nchar(water_raw$Sample_Date)-5), "%m/%d/%y")
runApp('Desktop/projects/open_data_dal/FollowRivers')
runApp('Desktop/projects/open_data_dal/FollowRivers')
as.character(unique(water_df$Station_Name)[1]
)
runApp('Desktop/projects/open_data_dal/FollowRivers')
caner <- "caner"
caner
diven <- c("caner","diven","vinay")
caner %in% diven
diven <- c("diven","vinay")
caner %in% diven
?which
which(diven %in% caner)
caner
diven
diven <- c("caner","diven","vinay")
which(diven %in% caner)
which(caner %in% diven)
caner %in% diven
diven %in% caner
diven
which(diven %in% caner)
diven <- c("caner","diven","vinay", "caner")
which(diven %in% caner)
caner
diven[which(diven %in% caner)]
diven[which(diven %in% caner)] <- "test"
diven
recom_data <- read.csv("/Users/Caner/Downloads/IBA_Json_Data/jsons/recommendation_data.csv")
View(recom_data)
os_order <- read.table("./ECT/OS_ORDER.txt", stringsAsFactors=FALSE)
cd
os.dir(0)
getwd()
setwd("/Users/Caner/Desktop/SMU_Class/Managing_Info_Tech_5570/nikita/big_data_group_project/")
os_order <- read.table("./ECT/OS_ORDER.txt", stringsAsFactors=FALSE)
os_order_items <- read.table("./ECT/OS_ORDER_ITEMS.txt", stringsAsFactors=FALSE)
View(os_order)
os_order <- read.table("./ECT/OS_ORDER.txt", stringsAsFactors=FALSE, fill = TRUE)
View(os_order)
os_order <- read.table("./ECT/OS_ORDER.txt", stringsAsFactors=FALSE, fill = TRUE, header = TRUE)
os_order <- read.table("./ECT/OS_ORDER2.txt", stringsAsFactors=FALSE, fill = TRUE, header = TRUE)
os_order <- read.table("./ECT/OS_ORDER2.txt", stringsAsFactors=FALSE, header = TRUE)
os_order_items <- read.table("./ECT/OS_ORDER_ITEMS.txt", stringsAsFactors=FALSE)
View(os_order_items)
os_order2 <- read.table("./ECT/OS_ORDER2.txt", stringsAsFactors=FALSE, header = TRUE, sep="\t")
View(os_order2)
os_order2 <- read.table("./ECT/OS_ORDER.txt", stringsAsFactors=FALSE, header = TRUE, sep="\t")
View(os_order2)
sapply(class,os_order)
sapply(os_order, class)
head(as.character(os_order$ORDER_CODE))
os_order <- read.table("./ECT/OS_ORDER.txt", stringsAsFactors=FALSE, header = TRUE, sep="\t")
os_order_items <- read.table("./ECT/OS_ORDER_ITEMS.txt", stringsAsFactors=FALSE,
header = TRUE, sep="\t")
os_order$ORDER_CODE <- as.character(os_order$ORDER_CODE)
sapply(os_order,class)
os_os_order$ORDER_CODE <- as.character(os_order$ORDER_CODE)
os_order$BUYER_ID <- as.character(os_order$BUYER_ID)
os_order$ORDER_CODE <- as.character(os_order$ORDER_CODE)
os_order$BUYER_ID <- as.character(os_order$BUYER_ID)
sapply(os_order,class)
unique(os_order$PAY_DT)
unique(os_order$CREATE_DT)
!(names(os_order) %in% "CREATE_DT"
)
os_order <- os_order[ , !(names(os_order) %in% "CREATE_DT")]
names(os_order)
sapply(os_order[,5:7], unique)
dim(os_order)
?as.POSIXct
as.POSIXct(os_order$PAY_DT, format = "%d-%m-%Y %H:%M:%OS")
os_order$PAY_DT <- as.POSIXct(os_order$PAY_DT, format = "%d-%m-%Y %H:%M:%OS")
max(os_order$PAY_DT)
max(os_order$PAY_DT, na.rm = TRUE)
min(os_order$PAY_DT, na.rm = TRUE)
sapply(os_order[,5:7], unique)
sapply(os_order[,7], unique)
unique(os_order$EXCEPTION_STATUS)
os_order <- os_order[ , !(names(os_order) %in% c("CREATE_DT", "EXCEPTION_STATUS")]
os_order <- os_order[, !(names(os_order) %in% c("CREATE_DT", "EXCEPTION_STATUS"))]
View(os_order_items)
sapply(os_order_items, class)
os_order_items$ITEM_ID <- as.character(os_order_items$ITEM_ID)
os_order_items$ORDER_ID <- as.character(os_order_items$ORDER_ID)
os_order_items$GOODS_ID <- as.character(os_order_items$GOODS_ID)
# Converted item df ID columns to character type
unique(os_order$ORDER_STATUS)
dim(os_order_items)
dim(os_order)
library(sqldf)
install.packages('sqldf')
library(sqldf)
?sqldf
order_df  <- sqldf("SELECT * FROM os_order
INNER JOIN os_order_items ON os_order.ORDER_ID = os_order_items.ORDER_ID")
dim(order_df)
dim(os_order_items)
View(order_df)
names(order_df)
order_df <- order_df[, !(names(order_df) %in% c("ORDER_ID..8"))]
names(order_df)
length(unique(order_df$BUYER_ID))
order_NA <-sapply(order_df, function(y) sum(length(which(is.na(y)))))
order_NA
dim(order_df)
install.packages("Hmisc")
library(Hmisc)
order_desc
order_desc <- describe(order_df)
order_desc
unique(order_df$SHOP_PRICE)
sort(unique(order_df$SHOP_PRICE))
length(unique(order_df$CREATE_IP))
length(unique(order_df$BUYER_ID))
order_NA
dim(order_df)
order_desc
sort(unique(order_df$GOODS_PRICE))
tail(sort(unique(order_df$GOODS_PRICE)))
head(order_df$SHOP_PRICE == order_df$GOODS_PRICE)
sum(order_df$SHOP_PRICE == order_df$GOODS_PRICE)
dim(order_df)
101893 / 240331
sum(order_df$SHOP_PRICE < order_df$GOODS_PRICE)
2 / 5.8
recom_data <- read.csv("/Users/Caner/Downloads/IBA_Json_Data/jsons/recommendation_data.csv")
View(recom_data)
recom_data$name_entity %nin% c('India', 'Egypt')
recom_no_i_e <- recom_data[recom_data$name_entity %nin% c('India', 'Egypt'),]
View(recom_no_i_e)
recom_no_i_e[recom_no_i_e$app_by_opening >= 1,]
View(recom_no_i_e[recom_no_i_e$app_by_opening >= 1,])
View(recom_data)
tail(recom_data$opp_skill_pref,1)
tail(as.character(recom_data$opp_skill_pref,1))
tail(as.character(recom_data$opp_skill_pref),1)
names(recom_data)
opp_data <- read.csv("/Users/Caner/Desktop/projects/iba/opportunity_iba_challenge.csv",
na.strings=c(""," ","NA"),
stringsAsFactors=FALSE)
opp_global <- opp_data[opp_data$programme_id == "Global Volunteer",]
dim(opp_global)
head(opp_global$created_at,200)
class(opp_global$created_at)
opp_global$created_at <- as.POSIXct(opp_global$created_at, format = "%Y-%m-%d %H:%M:%OS")
View(opp_global[sort(opp_global$created_at),])
View(opp_global)
class(opp_global$created_at)
head(sort(opp_global$created_at),100)
head(sort(opp_global$created_at),500)
tail(sort(opp_global$created_at),500)
library(dplyr)
View(opp_global %>% arrange(created_at))
opp_global[opp_global$opportunity_id == 1056649,]
opp_global[opp_global$opportunity_id == 1056649,"background_pref"]
opp_global[opp_global$opportunity_id == 1056649,5]
opp_global[opp_global$opportunity_id == 1056649,6]
opp_global[opp_global$opportunity_id == 1056649,7]
opp_global[opp_global$opportunity_id == 1056649,11]
opp_global[opp_global$opportunity_id == 1056649,14]
opp_global[opp_global$opportunity_id == 1056649,15]
opp_global[opp_global$opportunity_id == 1056649,16]
opp_global[opp_global$opportunity_id == 1056649,17]
brazil <- opp_global[opp_global$opportunity_id == 1056649,]
brazil$opp_skill_pref
brazil$opp_background_pref
indonesia <- opp_global[opp_global$opportunity_id == 1056616,]
indonesia$opp_skill_pref
indonesia$opp_background_pref
austria <- opp_global[opp_global$opportunity_id == 908534,]
austria$opp_skill_pref
austria$opp_background_pref
turkey <- opp_global[opp_global$opportunity_id == 1056601,]
turkey$opp_background_pref
turkey$opp_skill_pref
?rf
